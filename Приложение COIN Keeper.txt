# Приложение: COIN Keeper.

------------------------------------------------------------------------------------------------------------------------------------

## Описание проекта:
CoinKeeper - "Coin" (монета) и "Keeper" (хранитель) - Ваш личный хранитель финансов.

**Стэк:** Flask, SQLAlchemy

------------------------------------------------------------------------------------------------------------------------------------


### 1. Структура База Данных (PostgreSQL): 




#### ExpensesCategories:

- id, title, description
- формат: integer, text (2000), text (10000)

- *Примечание:* description - Используем строго для описания типа title, чтобы пользователь мог понять свою же категорию.



#### Expenses:

- id, description, category_id, amount, balance_id, created_at
- формат: integer, integer, decimal (0.0 - после запятой идет 1 цифра), integer, timestamp

- *Примечание:* description - Тут заполняется подкатегории, например: title: еда, descriptions: Манты (или другое на выбор пользователя)
- *Примечание:* Expenses берет все расходы от title --> ExpensesCategories (другими словами, наследуется от него)



#### Balances:

- id, title, balance
- формат: integer, text(100), (0.0 - после запятой идет 1 цифра)

- *Примечание:* Таблица Баланс содержит только две категории: 1. Income 2. Expenses



#### Incomes:

- id, title, amount
- формат: integer, text(100), (0.0 - после запятой идет 1 цифра)

- *Примечание:* title - может содержать бесконечные источники дохода
- *Примечание:* Соответственно, наша модель будет создаваться на основе структуры БД.


------------------------------------------------------------------------------------------------------------------------------------


### Структура проекта:




Наше приложение способно на такие действия, как:


#### 1. ExpensesCategories:

1.1 Это категория будет работать с полем "title" таблицы ExpensesCategories.
- Просмотр списка категорий расходов.
- Добавление новой категории расходов.
- Удаление существующей категории расходов.
- Редактирование названия или описания категории расходов.



1.2 Это категория будет работать с полем "description" таблицы ExpensesCategories.
- Просмотр списка категорий расходов.
- Добавление новой категории расходов.
- Удаление существующей категории расходов.
- Редактирование названия или описания категории расходов.



#### 2. Expenses (Расходы):

- Просмотр списка расходов с указанием деталей (описание, сумма, дата). (По умолчанию сумма будет: 0, а после добавления категории расхода и указания суммы, например, еда: -20 сомони, то суммы будут плюсоваться (показываем -20 сомони)).
- Добавление нового расхода с выбором категории, указанием суммы и описания.
- Удаление существующего расхода.
- Редактирование деталей существующего расхода.



#### 3. Incomes (Доходы):

- Просмотр списка доходов с указанием названия и суммы (По умолчанию сумма будет: 0, а после добавления категории дохода и указания суммы, например, зарплата: 3000 сомони, то суммы будут плюсоваться).
- Добавление нового дохода с указанием названия и суммы.
- Удаление существующего дохода.
- Редактирование названия или суммы существующего дохода.



#### 4. Balances (Балансы):

- Просмотр списка балансов с указанием названия и текущего баланса.
- Добавление нового баланса с указанием начального баланса (сумма, по умолчанию будет: 0).
- Баланс суммирует все суммы из всех категорий таблицы Incomes (если там указаны суммы).
- Баланс минусует все суммы из всех категорий таблицы Expenses (если там указаны суммы).



------------------------------------------------------------------------------------------------------------------------------------

Пункт Роут-Обработчики:



Роут-обработчики для Категорий Расходов:

GET /expense-categories: Получить список категорий расходов.
POST /expense-categories: Добавить новую категорию расходов.
DELETE /expense-categories/<category_id>: Удалить существующую категорию расходов.
PUT /expense-categories/<category_id>: Редактировать категорию расходов.


Роут-обработчики для Категорий Доходов:

GET /income-categories: Получить список категорий доходов.
POST /income-categories: Добавить новую категорию доходов.
DELETE /income-categories/<category_id>: Удалить существующую категорию доходов.
PUT /income-categories/<category_id>: Редактировать категорию доходов.


Роут-обработчики для Расходов:

GET /expenses: Получить список расходов.
POST /expenses: Добавить новый расход.
DELETE /expenses/<expense_id>: Удалить существующий расход.
PUT /expenses/<expense_id>: Редактировать расход.


Роут-обработчики для Доходов:

GET /incomes: Получить список доходов.
POST /incomes: Добавить новый доход.
DELETE /incomes/<income_id>: Удалить существующий доход.
PUT /incomes/<income_id>: Редактировать доход.

------------------------------------------------------------------------------------------------------------------------------------

Фукнции к Роут-Обработчикам:


Функции для Категорий Расходов:

get_expense_categories(): Получить список категорий расходов из базы данных.
add_expense_category(category_data): Добавить новую категорию расходов в базу данных.
delete_expense_category(category_id): Удалить категорию расходов из базы данных.
edit_expense_category(category_id, new_data): Редактировать категорию расходов в базе данных.


Функции для Категорий Доходов:

get_income_categories(): Получить список категорий доходов из базы данных.
add_income_category(category_data): Добавить новую категорию доходов в базу данных.
delete_income_category(category_id): Удалить категорию доходов из базы данных.
edit_income_category(category_id, new_data): Редактировать категорию доходов в базе данных.


Функции для Расходов:

get_expenses(): Получить список расходов из базы данных.
add_expense(expense_data): Добавить новый расход в базу данных.
delete_expense(expense_id): Удалить расход из базы данных.
edit_expense(expense_id, new_data): Редактировать расход в базе данных.


Функции для Доходов:

get_incomes(): Получить список доходов из базы данных.
add_income(income_data): Добавить новый доход в базу данных.
delete_income(income_id): Удалить доход из базы данных.
edit_income(income_id, new_data): Редактировать доход в базе данных.

------------------------------------------------------------------------------------------------------------------------------------

3. Фронтенд:

Создайте шаблоны для каждой страницы, на которой вы хотите отобразить данные. Например, шаблон для отображения списка расходов, форму для добавления нового расхода и так далее.

------------------------------------------------------------------------------------------------------------------------------------

4. Интерфейс пользователя:

Определите, какие элементы интерфейса нужны для каждой страницы вашего приложения. Например, формы для ввода данных, таблицы для отображения списков, кнопки для выполнения действий.

------------------------------------------------------------------------------------------------------------------------------------

5. Определение стилей:

Решите, как вы хотите стилизовать ваш интерфейс. Вы можете использовать собственные стили или подключить фреймворк стилей, такой как Bootstrap.

------------------------------------------------------------------------------------------------------------------------------------

6. Интеграция с бэкендом:


